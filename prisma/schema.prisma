generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  password  String   @db.Text
  firstName String?
  lastName  String?
  imageUrl  String?  @db.Text
  bio       String   @db.Text
  rank      UserRank @default(COAL)
  role      UserRole @default(USER)
  plan      UserPlan @default(NONE)

  threads       Thread[]
  threadReplies ThreadReply[]

  votes Vote[]

  active        Boolean         @default(false)
  activateToken ActivateToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivateToken {
  id          String    @id @default(uuid())
  token       String    @unique
  activatedAt DateTime?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum UserRank {
  COAL
  IRON
  GOLD
  REDSTONE
  LAPIS
  DIAMOND
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  OWNER
}

enum UserPlan {
  NONE
  PREMIUM
}

// model AvatarImage {
//   id  String @id @default(uuid())
//   url String @db.Text

//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Thread {
  id      String  @id @default(uuid())
  title   String  @db.Text
  content String? @db.Text

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  tags    Tag[]
  replies ThreadReply[]
  votes   Vote[]

  editedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([authorId])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  threads Thread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreadReply {
  id      String @id @default(uuid())
  content String

  votes Vote[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  editedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([threadId])
  @@index([authorId])
}

model Vote {
  id String @id @default(uuid())

  type VoteType

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  threadId String?
  thread   Thread? @relation(fields: [threadId], references: [id], onDelete: Cascade)

  threadReplyId String?
  threadReply   ThreadReply? @relation(fields: [threadReplyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([authorId, threadId])
  @@unique([authorId, threadReplyId])
  @@index([authorId])
  @@index([threadId])
  @@index([threadReplyId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
